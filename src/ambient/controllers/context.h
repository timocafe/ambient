/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_CONTROLLERS_CONTEXT
#define AMBIENT_CONTROLLERS_CONTEXT
#ifndef AMBIENT_SERIAL_COLLECTION

namespace ambient {

    struct context_mt {
        typedef controllers::controller controller_type;

        struct thread_context {
            controller_type controller;
            std::stack<actor*, std::vector<actor*> > actors;
            std::stack<scope*, std::vector<scope*> > scopes;
            int offset;
        };

        struct divergence_guard {
            ~divergence_guard();
            divergence_guard(size_t length);
            std::vector< std::vector<controllers::meta*> > transfers;
        };

        context_mt();
        thread_context& get();
        const thread_context& get() const;
        void delay_transfer(controllers::meta* m);
        bool threaded() const;
        void init(actor*);
        void sync();
        void fork(divergence_guard*);
        void join();
        void diverge(int o);

        std::vector<thread_context> thread_context_lane;
        divergence_guard* threaded_region;
    };

    typedef context_mt context;
}

#else

namespace ambient {

    struct context_serial {
        typedef controllers::controller controller_type;

        controller_type controller;
        std::stack<actor*, std::vector<actor*> > actors;
        std::stack<scope*, std::vector<scope*> > scopes;

        context_serial& get();
        void delay_transfer(controllers::meta* m);
        bool threaded() const;
        void init(actor*);
        void sync();
        void fork(void*);
        void join();
        void diverge(int);
    };

    typedef context_serial context;
}

#endif
#endif
