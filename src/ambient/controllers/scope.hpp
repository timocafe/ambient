/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_CONTROLLERS_SCOPE_HPP
#define AMBIENT_CONTROLLERS_SCOPE_HPP

namespace ambient {

    inline bool scope::nested() {
        return ambient::select().has_nested_actor();
    }
    inline bool scope::local() {
        return ambient::select().get_actor().local();
    }
    inline scope::const_iterator scope::balance(int k, int max_k) {
        int capacity = scope::size();
        if (max_k > capacity) {
            int k_ = k / ((int)(max_k / capacity));
            if (k_ < capacity) k = k_;
        }
        return scope::begin() + k % capacity;
    }
    inline scope::const_iterator scope::permute(int k, const std::vector<int>& s, size_t granularity) {
        if (k >= s.size()) throw std::runtime_error("Error: permutation overflow!");
        if (granularity > scope::size()) granularity = 1;
        return scope::begin() + granularity * (s[k] % (scope::size() / granularity));
    }
    inline scope& scope::top() {
        return ambient::select().get_scope();
    }
    inline scope::const_iterator scope::begin() {
        return top().provision.begin();
    }
    inline scope::const_iterator scope::end() {
        return top().provision.end();
    }
    inline size_t scope::size() {
        return top().provision.size();
    }
    inline scope::~scope() {
        ambient::select().pop_scope();
    }
    inline scope::scope(const_iterator first, const_iterator last) {
        for (const_iterator it = first; it != last; it++) provision.push_back(*it);
        ambient::select().push_scope(this);
    }
    inline scope::scope(const_iterator first, size_t size) {
        const_iterator last = first + std::min(ambient::scope::size(), size);
        for (const_iterator it = first; it != last; it++) provision.push_back(*it);
        ambient::select().push_scope(this);
    }
    inline scope::scope(size_t np) {
        for (int i = 0; i < np; i++) provision.push_back(i);
    }
}

#endif
