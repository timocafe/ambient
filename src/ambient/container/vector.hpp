/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_CONTAINER_VECTOR_HPP
#define AMBIENT_CONTAINER_VECTOR_HPP

 /* The actual implementation of vector is separated into two classes: vector and vector_async.
  * For the purpose of flexibility they both share the same interface but the limitations have to be noted.
  *
  * vector (a high-level wrapper to provide user-space interface to compose async calls):
  *
  *    - cached size: unlike capacity, the size of the vector might be changed asynchroneously (invoke measure() to refresh cached value).
  *    - data-access: discouraged due to performance reasons but is possible if to invoke load() first.
  *
  * vector_async (is used for the actual data-access inside async calls):
  *
  *    - capacity: can't be changed in async mode (so methods changing the size will fail if it's reached).
  *    - please check the list of allowed calls in vector_async.h.
  */

#include "ambient/container/vector/vector.hpp"
#include "ambient/container/vector/vector_async.hpp"

#endif
