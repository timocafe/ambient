/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_MEMORY_FACTORY
#define AMBIENT_MEMORY_FACTORY

namespace ambient {
    namespace memory {

        template<size_t S>
        class private_factory {
        public:
            private_factory() {
                this->buffers.push_back(std::malloc(S));
                this->buffer = &this->buffers[0];
            }
            ~private_factory() {
                for (int i = 0; i < buffers.size(); i++)
                    std::free(this->buffers[i]);
            }
            void* provide() {
                void* chunk = *buffer;
                if (chunk == buffers.back()) {
                    buffers.push_back(std::malloc(S));
                    buffer = &buffers.back();
                }
                else
                    buffer++;
                return chunk;
            }
            void reset() {
                buffer = &buffers[0];
            }
            size_t size() {
                return (buffer - &buffers[0]);
            }
        private:
            std::vector<void*> buffers;
            void** buffer;
        };

        template<size_t S>
        class factory {
        public:
            typedef ambient::mutex mutex;
            typedef ambient::guard<mutex> guard;
        private:
            factory(const factory&) = delete;
            factory& operator=(const factory&) = delete;
            factory() {
                this->buffers.push_back(std::malloc(S));
                this->buffer = &this->buffers[0];
            }
        public:
            static factory& instance() {
                static factory singleton; return singleton;
            }
            static void* provide() {
                factory& s = instance();
                guard g(s.mtx);
                void* chunk;

                chunk = *s.buffer;
                if (*s.buffer == s.buffers.back()) {
                    s.buffers.push_back(std::malloc(S));
                    s.buffer = &s.buffers.back();
                }
                else
                    s.buffer++;

                return chunk;
            }
            static void deallocate() {
                factory& s = instance();
                for (int i = 1; i < s.buffers.size(); i++) std::free(s.buffers[i]);
                s.buffers.resize(1);
            }
            static void reset() {
                factory& s = instance();
                s.buffer = &s.buffers[0];
            }
            static size_t size() {
                factory& s = instance();
                return (s.buffer - &s.buffers[0]);
            }
        private:
            mutex mtx;
            std::vector<void*> buffers;
            void** buffer;
        };

    }
}

#endif
