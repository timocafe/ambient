/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_MEMORY_TYPES
#define AMBIENT_MEMORY_TYPES

namespace ambient {
    namespace memory {

        namespace cpu {
            class standard;
            class bulk;
        }
        class delegated;

        struct memory_tuple {
            typedef std::tuple< memory::cpu::bulk,
                memory::cpu::standard,
                memory::delegated > type;
        };

        template<int N, int Limit>
        constexpr int lower_bound() {
            return (N > Limit ? N : Limit);
        }

        template<class T, class Tuple, int I = std::tuple_size<Tuple>::value>
        constexpr int find_type() {
            return I ? std::is_same< typename std::tuple_element<lower_bound<I - 1, 0>(), Tuple>::type, T >::value ? I - 1 : find_type<T, Tuple, lower_bound<I - 1, 0>()>()
                : -1;
        }

        template<int Offset>
        struct checked_get { static constexpr int value = Offset; };

        template<>
        struct checked_get< -1 > { /* type not found */ };

        template<typename T>
        constexpr int serial_id() {
            return checked_get< find_type<T, memory_tuple::type>() >::value;
        }
    }
}

#endif
