/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_MEMORY_CPU_NEW_HPP
#define AMBIENT_MEMORY_CPU_NEW_HPP

namespace ambient {
    namespace memory {
        namespace cpu {

            template<class T>
            void* use_fixed_new<T>::operator new (size_t sz) { assert(sz == sizeof(T)); return ambient::memory::malloc<memory::cpu::fixed, T>(); }

            template<class T>
            void use_fixed_new<T>::operator delete (void* ptr) { ambient::memory::free<memory::cpu::fixed, sizeof(T)>(ptr); }

            template<class T>
            void* use_bulk_new<T>::operator new (size_t sz) { assert(sz == sizeof(T)); return ambient::memory::malloc<memory::cpu::instr_bulk, T>(); }

            template<class T>
            void use_bulk_new<T>::operator delete(void* ptr) { }

        }
    }
}

#endif
