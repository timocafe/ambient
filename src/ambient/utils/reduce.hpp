/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_UTILS_REDUCE
#define AMBIENT_UTILS_REDUCE

namespace ambient {

    template<typename T>
    inline void reduce(std::vector<T*>& seq) {
        if (seq.size() == 1) return;
        for (int stride = 1; stride < seq.size(); stride *= 2)
            for (int k = stride; k < seq.size(); k += stride * 2) {
                *seq[k - stride] += *seq[k];
            }
    }

    template<typename T, typename Function>
    inline T& reduce(std::vector<T>& seq, Function fn) {
        if (seq.size() == 1) return seq[0];
        for (int stride = 1; stride < seq.size(); stride *= 2)
            for (int k = stride; k < seq.size(); k += stride * 2) {
                fn(seq[k - stride], seq[k]);
            }
        return seq[0];
    }

    template<typename T, typename Function>
    inline T& reduce_sync(std::vector<T>& seq, Function fn) {
        if (seq.size() == 1) return seq[0];
        for (int stride = 1; stride < seq.size(); stride *= 2) {
            for (int k = stride; k < seq.size(); k += stride * 2) {
                fn(seq[k - stride], seq[k]);
            }
            ambient::sync();
        }
        return seq[0];
    }
}

#endif
