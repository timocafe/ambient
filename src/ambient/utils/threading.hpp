/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_UTILS_THREADING
#define AMBIENT_UTILS_THREADING

#define CILK    1
#define OPENMP  2

 // default: select threading if icc/gcc
#if !defined(AMBIENT_THREADING)
#if defined __INTEL_COMPILER
#define AMBIENT_THREADING CILK
#elif defined __GNUC__
#define AMBIENT_THREADING OPENMP
#endif
#endif

#if AMBIENT_THREADING == CILK
#include <cilk/cilk.h>
#include <cilk/cilk_api.h>
#define AMBIENT_CILK
#define AMBIENT_THREADING_TAGLINE "using cilk"
#define AMBIENT_NUM_THREADS __cilkrts_get_nworkers()
#define AMBIENT_THREAD_ID __cilkrts_get_worker_number()
#define AMBIENT_THREAD cilk_spawn
#define AMBIENT_SMP_ENABLE
#define AMBIENT_SMP_DISABLE cilk_sync;
#define AMBIENT_PARALLEL_FOR(...) cilk_for(__VA_ARGS__)
#elif AMBIENT_THREADING == OPENMP
#include <omp.h>
#define AMBIENT_OMP
#define AMBIENT_THREADING_TAGLINE "using openmp"
#define AMBIENT_THREAD_ID omp_get_thread_num()
#define AMBIENT_PRAGMA(a) _Pragma( #a )
#define AMBIENT_THREAD AMBIENT_PRAGMA(omp task untied)
#define AMBIENT_PARALLEL_FOR(...) AMBIENT_PRAGMA(omp parallel for schedule(dynamic, 1)) for(__VA_ARGS__)
#define AMBIENT_SMP_ENABLE AMBIENT_PRAGMA(omp parallel) { AMBIENT_PRAGMA(omp single nowait)
#define AMBIENT_SMP_DISABLE }
#define AMBIENT_NUM_THREADS [&]()->int{ int n; AMBIENT_SMP_ENABLE \
                              { n = omp_get_num_threads(); } \
                              AMBIENT_SMP_DISABLE return n; }()
#else
#define AMBIENT_PARALLEL_FOR(...) for(__VA_ARGS__)
#define AMBIENT_THREADING_TAGLINE "no threading"
#define AMBIENT_NUM_THREADS 1
#define AMBIENT_THREAD_ID   0
#define AMBIENT_THREAD
#define AMBIENT_SMP_ENABLE
#define AMBIENT_SMP_DISABLE
#endif

namespace ambient {
  inline int num_threads() {
    static int n = AMBIENT_NUM_THREADS; return n;
  }
}

#endif
