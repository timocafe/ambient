/*
 * Copyright Institute for Theoretical Physics, ETH Zurich 2015.
 * Distributed under the Boost Software License, Version 1.0.
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

#ifndef AMBIENT_UTILS_MEMINFO
#define AMBIENT_UTILS_MEMINFO

namespace ambient {

    inline void meminfo() {
        typedef ambient::future<double> real_type;
        std::vector<real_type> peaks; peaks.reserve(ambient::scope::size());
        std::vector<real_type> currents; currents.reserve(ambient::scope::size());

        for (int i = 0; i < ambient::scope::size(); i++) {
            ambient::actor where(ambient::scope::begin() + i);
            real_type current, peak;

            ambient::async([](real_type& c, real_type& p) {
                double avail_size = (double)getRSSLimit();
                c.set((double)getCurrentRSS() * 100 / avail_size);
                p.set((double)getPeakRSS() * 100 / avail_size);
                }, current, peak);

            currents.push_back(current);
            peaks.push_back(peak);
        }
        ambient::sync();

        if (ambient::master()) {
            double average_c = 0, average_p = 0;
            int min_c = 0, min_p = 0;
            int max_c = 0, max_p = 0;

            for (int k = 0; k < ambient::scope::size(); k++) {
                average_c += currents[k];
                if (currents[min_c] > currents[k]) min_c = k;
                else if (currents[max_c] < currents[k]) max_c = k;

                average_p += peaks[k];
                if (peaks[min_p] > peaks[k]) min_p = k;
                else if (peaks[max_p] < peaks[k]) max_p = k;
            }

            average_c /= ambient::scope::size();
            average_p /= ambient::scope::size();

            printf("Current average consumption: %.1f%%, min is %.1f%% (R%d), max is %.1f%% (R%d)\n", average_c, (double)currents[min_c], min_c, (double)currents[max_c], max_c);
            printf("Peak average consumption: %.1f%%, min is %.1f%% (R%d), max is %.1f%% (R%d)\n", average_p, (double)peaks[min_p], min_p, (double)peaks[max_p], max_p);
        }
    }
}

#endif
